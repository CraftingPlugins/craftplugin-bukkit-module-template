//file:noinspection GroovyAssignabilityCheck
buildscript {
    repositories {
        mavenCentral()
    }
}
plugins {
    id 'io.fairyproject' version '0.6.6b6-SNAPSHOT'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'xyz.jpenilla.run-paper' version '1.0.6' apply false
}

repositories {
    mavenLocal()
    mavenCentral()
}

version = '1.0.0'

allprojects {
    if (isNotJavaProject(project)) {
        project.tasks.configureEach { task -> task.enabled = false }
        return
    }

    group = findProperty("plugin.package")
}

subprojects {
    version = rootProject.version

    if (isNotJavaProject(project)) {
        project.tasks.configureEach { task -> task.enabled = false }
        project.tasks.withType(PublishToMavenRepository).configureEach { it.enabled = false }
        return
    }

    apply plugin: 'java-library'
    apply plugin: 'io.fairyproject'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'com.github.johnrengelman.shadow'

    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            name 'Jitpack'
            url 'https://jitpack.io'
        }
        maven {
            name 'Imanity'
            url 'https://repo.imanity.dev/imanity-libraries'
        }
        maven {
            name 'PaperMC'
            url 'https://repo.papermc.io/repository/maven-public'
        }
        maven {
            name = "CodeMC"
            url = uri("https://repo.codemc.io/repository/maven-public/")
        }
    }

    dependencies {
        // Jabel
        annotationProcessor 'com.github.bsideup.jabel:jabel-javac-plugin:0.4.2'
        compileOnly 'com.github.bsideup.jabel:jabel-javac-plugin:0.4.2'

        // Lombok
        compileOnly(libs.lombok)
        annotationProcessor(libs.lombok)
        testCompileOnly(libs.lombok)
        testAnnotationProcessor(libs.lombok)

        // Testing
        testImplementation("org.junit.jupiter:junit-jupiter-engine:5.9.0")
    }

    configure([tasks.compileJava]) {
        sourceCompatibility = 17 // for the IDE support
        options.release = 8
        options.encoding = 'UTF-8'

        javaCompiler = javaToolchains.compilerFor {
            languageVersion = JavaLanguageVersion.of(17)
        }
    }

    java {
        toolchain {
            languageVersion.set(JavaLanguageVersion.of(8))
        }
    }

    shadowJar {
        relocate("io.fairyproject.bootstrap", "" + findProperty("plugin.package") + ".fairy.bootstrap")
        relocate("io.fairyproject", "" + findProperty("core.package") + ".fairy")
        relocate("net.kyori", "" + findProperty("core.package") + ".fairy.libs.kyori")
        relocate("com.cryptomorin.xseries", "" + findProperty("core.package") + ".xseries")
        relocate("org.spongepowered.configurate", "" + findProperty("plugin.package") + ".libs.configurate")

        dependencies {
            exclude(dependency("io.github.classgraph:.*:.*"))
            exclude(dependency("io.github.toolfactory:.*:.*"))
            exclude(dependency("javax.annotation:.*:.*"))
            exclude(dependency("javax.persistence:.*:.*"))
            exclude(dependency("com.google.code.gson:.*:.*"))
            exclude(dependency("org.yaml:.*:.*"))
            exclude(dependency("com.google.*:.*:.*"))
            exclude(dependency("org.jetbrains:.*:.*"))
            exclude(dependency("net.kyori:.*:.*"))
            exclude(dependency("com.github.retrooper.*:.*:.*"))
            exclude(dependency("io.fairyproject:.*-platform:.*"))
        }

        archiveFileName.set(archiveFileName.get().split("-")[0] + ".jar")
    }

    build {
        dependsOn(shadowJar)
    }

    test {
        useJUnitPlatform()
    }
}

static boolean isNotJavaProject(Project project) {
    return project.buildFile == null || !project.buildFile.exists()
}
